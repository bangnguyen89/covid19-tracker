{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","isRed","isOrange","isGreen","active","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","Map","countries","casesType","center","zoom","TileLayer","url","attribution","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callback","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormate","yAxes","gridLines","ticks","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","console","log","FormControl","Select","variant","onChange","MenuItem","key","e","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b3b8e750.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card, CardContent, Typography} from \"@material-ui/core\";\r\nimport \"./InfoBox.css\";\r\n\r\n\r\nfunction InfoBox({title, cases, isRed, isOrange, isGreen, active, total, ...props}) {\r\n    return (\r\n        <Card \r\n            onClick={props.onClick} \r\n            className={`infoBox ${active && \"infoBox--selected\"} \r\n                                ${isRed && \"infoBox--red\"} \r\n                                ${isOrange && \"infoBox--orange\"} \r\n                                ${isGreen && \"infoBox--green\"}`}\r\n        >\r\n\r\n            <CardContent>\r\n                {/* Total */}\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n                    {title}\r\n                </Typography>              \r\n\r\n                {/* +120k Number of cases */}\r\n                <h2 className={`infoBox__cases ${!isRed && !isOrange && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n                {/* 1.2M Total */}\r\n                <Typography className=\"infoBox__total\">\r\n                    {total} Total\r\n                </Typography>\r\n\r\n            </CardContent>\r\n            \r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default InfoBox;\r\n","import { Circle, Popup } from \"react-leaflet\";\r\nimport React from \"react\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgb(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgb(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgb(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//draw circle on the map with interactive tooltip\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n            <div className=\"info-flag\" style={{backgroundImage: `url(${country.countryInfo.flag})`}}></div>\r\n            <div className=\"info-name\">{country.country}</div>\r\n            <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n            <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n            <div className=\"info-death\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));\r\n","import React from 'react';\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport {showDataOnMap} from \"./util\";\r\n\r\nfunction Map({countries, casesType, center, zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\" https://www.openstreetmap.org/\">OpenStreetMap</a> contributors'\r\n                />\r\n\r\n                {/* Loop through countries and draw circles on the scree */}\r\n                {showDataOnMap(countries, casesType)}\r\n\r\n            </LeafletMap>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {\r\n                countries.map(({country, cases}) => (\r\n                    <tr>\r\n                        <td>{country}</td>\r\n                        <td>\r\n                            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n                        </td>\r\n                    </tr>\r\n\r\n                ))\r\n            }\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgb(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgb(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgb(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callback: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YYYY\",\r\n          tooltipFormate: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType = \"cases\") => {\r\n  const chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    // console.log(date);\r\n    // console.log(lastDataPoint);\r\n    if (lastDataPoint) {\r\n      const newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType = \"cases\", ...props}) {\r\n  const [data, setData] = useState({});\r\n\r\n  //https://disease.sh/v3/covid-19/historical/all?lastdays=120\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => response.json())\r\n        .then((data) => {\r\n          //   console.log(data);\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                data: data,\r\n                backgroundColor: casesTypeColors[casesType].half_op,\r\n                borderColor: casesTypeColors[casesType].hex,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from \"react\";\nimport { MenuItem, FormControl, Select, Card, CardContent } from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport LineGraph from \"./LineGraph\";\nimport {sortData, prettyPrintStat} from \"./util\";\nimport \"./App.css\";\nimport \"leaflet/dist/leaflet.css\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({lat: 34.80764, lng: -40.4796});\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then((response) => response.json())\n    .then((data) => {\n      setCountryInfo(data);\n    });\n\n  }, []);\n\n  //USEEFFECT = run a piece of code based on a given condition\n  useEffect(() => {\n    //The code inside here will run when the component loaded and not again\n    //async --> send request to server, wait for it, do st\n\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2, //UK,USA,FR\n          }));\n\n          const sortedData = sortData(data);\n\n          setTableData(sortedData);\n\n          setMapCountries(data);\n\n          setCountries(countries);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url = \n        countryCode === \"worldwide\" \n          ? \"https://disease.sh/v3/covid-19/all\" \n          : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        console.log(data);\n        setCountry(countryCode);\n\n        //all of the data from the country response\n        setCountryInfo(data);\n\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n\n      })\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        {/* {Header} */}\n        {/* Title + select input dropdown field */}\n\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              onChange={onCountryChange}\n              value={country}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country, index) => (\n                <MenuItem key={index} value={country.value}>\n                  {country.name}\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/* {Infobox} */}\n        {/* {Infobox} */}\n        {/* {Infobox} */}\n\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={e => setCasesType('cases')}\n            title=\"Coronavirus Cases\" \n            cases={prettyPrintStat(countryInfo.todayCases)} \n            total={prettyPrintStat(countryInfo.cases)} />\n\n          <InfoBox\n            isGreen\n            active={casesType === \"recovered\"}\n            onClick={e => setCasesType('recovered')}\n            title=\"Recovered\" \n            cases={prettyPrintStat(countryInfo.todayRecovered)} \n            total={prettyPrintStat(countryInfo.recovered)} />\n\n          <InfoBox\n            isOrange\n            active={casesType === \"deaths\"}\n            onClick={e => setCasesType('deaths')}\n            title=\"Deaths\" \n            cases={prettyPrintStat(countryInfo.todayDeaths)} \n            total={prettyPrintStat(countryInfo.deaths)} />\n        </div>       \n\n        {/* {Map} */}\n        <Map \n          countries={mapCountries} \n          casesType={casesType} \n          center={mapCenter} \n          zoom={mapZoom} \n\n        />\n      </div>\n\n      <Card className=\"app__right\"> \n        <CardContent>\n              {/* {Table} */}\n              <h3>Live Cases by Country</h3>\n              <Table countries={tableData} />\n\n              {/* {Graph} */}\n              <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n              <LineGraph className=\"app__graph\" casesType={casesType}/>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}